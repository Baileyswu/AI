struct Trie{    int next[WN][AL], fail[WN], end[WN];    int root, L;    int newnode()    {        for(int i = 0;i < AL;i++)            next[L][i] = -1;        end[L++] = 0;        return L-1;    }    void init()    {        L = 0;        root = newnode();    }    void insert(char buf[], int x)    {        int len = strlen(buf);        int now = root;        for(int i = 0;i < len;i++)        {            if(next[now][buf[i]-'A'] == -1)                next[now][buf[i]-'A'] = newnode();            now = next[now][buf[i]-'A'];        }        end[now] = x;    }    void build()    {        queue<int> Q;        fail[root] = root;        for(int i = 0;i < AL;i++)            if(next[root][i] == -1)                next[root][i] = root;            else            {                fail[next[root][i]] = root;                Q.push(next[root][i]);            }        while(!Q.empty())        {            int now = Q.front();            Q.pop();            for(int i = 0;i < AL;i++)                if(next[now][i] == -1)                    next[now][i] = next[fail[now]][i];                else                {                    fail[next[now][i]] = next[fail[now]][i];                    Q.push(next[now][i]);                }        }    }    int query(char buf[])    {        int len = strlen(buf);        int now = root;        int res = 0;        for(int i = 0;i < len;i++)        {            now = next[now][buf[i]-'A'];            int temp = now;            while( temp != root )            {                res += end[temp];                end[temp] = 0;                temp = fail[temp];            }        }        return res;    }}ac;
